#version 440 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 16) in;

bool debugFaces = false;

struct Chunk{
    vec3 pos;
};

struct Voxel{
    int voxType;
    int isSolid;
};

struct Vertex{
    int x;
    int y;
    int z;
};

struct Colour{
    int r;
    int g;
    int b;
    int a;
};

// Chunk Data
layout(binding = 3) buffer chunk_data {

    Chunk chunk[];
};

// Vertices Data
layout(binding = 1) buffer vertices_out {

    Vertex vertices[];
};

// Vertex Colour Data
layout(binding = 2) buffer vertexColours_out {

    Colour vertex_colours[];
};

// Voxel Data (data for each voxel in the chunk)
layout(binding = 0) buffer voxel_data {

    Voxel voxels[];
};

// Create a flattened 2D array to store information about the greedy meshing that has taken place
bool vertGreedyMeshHasData[16*16];
int vertGreedyMeshVoxelTypes[16*16];
int vertGreedyMeshHeights[16*16];
int vertGreedyMeshWidths[16*16];
int vertGreedyMeshVertexIndex[16*16];

// Create a flattened 2D array to store information about the greedy meshing that has taken place
bool horizGreedyMeshHasData[16*16];
int horizGreedyMeshVoxelTypes[16*16];
int horizGreedyMeshHeights[16*16];
int horizGreedyMeshWidths[16*16];
int horizGreedyMeshVertexIndex[16*16];

// Apply greedy meshing to the specified sequence of horizontal faces
void greedyMeshFacesHorizontal(int index, int faceIndex){

    // Vertices that will be used to apply greedy meshing
    Vertex tlV, trV, blV, brV;

    // Get the desired width of the greedy mesh
    int width = horizGreedyMeshWidths[index];
    int height = horizGreedyMeshHeights[index];

    // Horizontal Greedy Meshing for Front and Back Faces
    if(faceIndex == 0 || faceIndex == 2){

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 0){
            tlV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 4];
            trV = vertices[horizGreedyMeshVertexIndex[index] + 2];
            blV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 5];
            brV = vertices[horizGreedyMeshVertexIndex[index] + 1];
        }

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 2){
            tlV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 5];
            trV = vertices[horizGreedyMeshVertexIndex[index] + 1];
            blV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 4];
            brV = vertices[horizGreedyMeshVertexIndex[index] + 2];
        }

        // Wipe all the vertices that exist within where greedy meshing should apply
        for(int i = 0; i < width; i++){

            int iIndex = index - i;
            for(int l = 0; l < 6; l++){

                int vertexIndex = horizGreedyMeshVertexIndex[iIndex];
                Vertex v = {0, 0, 0};
                vertices[vertexIndex + l] = v;
            }
        }

        int vertexIndex = horizGreedyMeshVertexIndex[index - width + 1];

        if(debugFaces){
            vertex_colours[vertexIndex + 0] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 1] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 2] = Colour(0, 0, 255, 255);
            vertex_colours[vertexIndex + 3] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 4] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 5] = Colour(0, 0, 255, 255);
        }

        // Create a Greedy Mesh Face
        if(faceIndex == 0){

            vertices[vertexIndex + 0] = blV;
            vertices[vertexIndex + 1] = brV;
            vertices[vertexIndex + 2] = trV;
            vertices[vertexIndex + 3] = trV;
            vertices[vertexIndex + 4] = tlV;
            vertices[vertexIndex + 5] = blV;
        }

        // Create a Greedy Mesh Back Face
        if(faceIndex == 2){

            vertices[vertexIndex + 0] = tlV;
            vertices[vertexIndex + 1] = trV;
            vertices[vertexIndex + 2] = brV;
            vertices[vertexIndex + 3] = brV;
            vertices[vertexIndex + 4] = blV;
            vertices[vertexIndex + 5] = tlV;
        }
    }

    // Horizontal Greedy Meshing for Left and Right Faces
    if(faceIndex == 3 || faceIndex == 1){

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 3){
            tlV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 4];
            trV = vertices[horizGreedyMeshVertexIndex[index] + 2];
            blV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 5];
            brV = vertices[horizGreedyMeshVertexIndex[index] + 1];
        }

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 1){
            tlV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 2];
            trV = vertices[horizGreedyMeshVertexIndex[index] + 4];
            blV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 1];
            brV = vertices[horizGreedyMeshVertexIndex[index] + 5];
        }

        // Wipe all the vertices that exist within where greedy meshing should apply
        for(int i = 0; i < width; i++){

            int iIndex = index - i;
            for(int l = 0; l < 6; l++){

                int vertexIndex = horizGreedyMeshVertexIndex[iIndex];
                Vertex v = {0, 0, 0};
                vertices[vertexIndex + l] = v;
            }
        }

        int vertexIndex = horizGreedyMeshVertexIndex[index - width + 1];

        if(debugFaces){
            vertex_colours[vertexIndex + 0] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 1] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 2] = Colour(0, 0, 255, 255);
            vertex_colours[vertexIndex + 3] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 4] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 5] = Colour(0, 0, 255, 255);
        }

        // Create a Greedy Mesh Left Face
        if(faceIndex == 3){

            vertices[vertexIndex + 0] = blV;
            vertices[vertexIndex + 1] = brV;
            vertices[vertexIndex + 2] = trV;
            vertices[vertexIndex + 3] = trV;
            vertices[vertexIndex + 4] = tlV;
            vertices[vertexIndex + 5] = blV;
        }

        // Create a Greedy Mesh Right Face
        if(faceIndex == 1){

            vertices[vertexIndex + 0] = brV;
            vertices[vertexIndex + 1] = blV;
            vertices[vertexIndex + 2] = tlV;
            vertices[vertexIndex + 3] = tlV;
            vertices[vertexIndex + 4] = trV;
            vertices[vertexIndex + 5] = brV;
        }
    }

    // Horizontal Greedy Meshing for Top and Bottom Faces
    if(faceIndex == 5 || faceIndex == 4){

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 5){
            tlV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 5];
            trV = vertices[horizGreedyMeshVertexIndex[index] + 1];
            blV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 4];
            brV = vertices[horizGreedyMeshVertexIndex[index] + 2];
        }

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 4){
            tlV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 4];
            trV = vertices[horizGreedyMeshVertexIndex[index] + 2];
            blV = vertices[horizGreedyMeshVertexIndex[index - (width - 1)] + 5];
            brV = vertices[horizGreedyMeshVertexIndex[index] + 1];
        }

        // Wipe all the vertices that exist within where greedy meshing should apply
        for(int i = 0; i < width; i++){

            int iIndex = index - i;
            for(int l = 0; l < 6; l++){

                int vertexIndex = horizGreedyMeshVertexIndex[iIndex];
                Vertex v = {0, 0, 0};
                vertices[vertexIndex + l] = v;
            }
        }

        int vertexIndex = horizGreedyMeshVertexIndex[index - width + 1];

        if(debugFaces){
            vertex_colours[vertexIndex + 0] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 1] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 2] = Colour(0, 0, 255, 255);
            vertex_colours[vertexIndex + 3] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 4] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 5] = Colour(0, 0, 255, 255);
        }

        // Create a Greedy Mesh Left Face
        if(faceIndex == 5){

            vertices[vertexIndex + 0] = tlV;
            vertices[vertexIndex + 1] = trV;
            vertices[vertexIndex + 2] = brV;
            vertices[vertexIndex + 3] = brV;
            vertices[vertexIndex + 4] = blV;
            vertices[vertexIndex + 5] = tlV;
        }

        // Create a Greedy Mesh Right Face
        if(faceIndex == 4){

            vertices[vertexIndex + 0] = blV;
            vertices[vertexIndex + 1] = brV;
            vertices[vertexIndex + 2] = trV;
            vertices[vertexIndex + 3] = trV;
            vertices[vertexIndex + 4] = tlV;
            vertices[vertexIndex + 5] = blV;
        }
    }
}

// Apply greedy meshing to the specified sequence of vertical faces
void greedyMeshFacesVertical(int index, int faceIndex){

    // Vertices that will be used to apply greedy meshing
    Vertex tlV, trV, blV, brV;

    // Get the desired height of the greedy mesh
    int width = vertGreedyMeshWidths[index];
    int height = vertGreedyMeshHeights[index];

    // Vertical Greedy Meshing for Front and Back Faces
    if(faceIndex == 0 || faceIndex == 2){

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 0){
            tlV = vertices[vertGreedyMeshVertexIndex[index] + 4];
            trV = vertices[vertGreedyMeshVertexIndex[index] + 2];
            blV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 5];
            brV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 1];
        }

        if(faceIndex == 2){
            tlV = vertices[vertGreedyMeshVertexIndex[index]];
            trV = vertices[vertGreedyMeshVertexIndex[index] + 1];
            blV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 4];
            brV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 3];
        }

        // Wipe all the vertices that exist within where greedy meshing should apply
        for(int i = 0; i < height; i++){

            int iIndex = index - (i * 16);
            for(int l = 0; l < 6; l++){

                int vertexIndex = vertGreedyMeshVertexIndex[iIndex];
                Vertex v = {0, 0, 0};
                vertices[vertexIndex + l] = v;
            }
        }

        int vertexIndex = vertGreedyMeshVertexIndex[index];

        if(debugFaces){
            vertex_colours[vertexIndex + 0] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 1] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 2] = Colour(0, 0, 255, 255);
            vertex_colours[vertexIndex + 3] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 4] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 5] = Colour(0, 0, 255, 255);
        }

        // Create a Greedy Mesh Front Face
        if(faceIndex == 0){

            vertices[vertexIndex + 0] = blV;
            vertices[vertexIndex + 1] = brV;
            vertices[vertexIndex + 2] = trV;
            vertices[vertexIndex + 3] = trV;
            vertices[vertexIndex + 4] = tlV;
            vertices[vertexIndex + 5] = blV;
        }

        // Create a Greedy Mesh Back Face
        if(faceIndex == 2){

            vertices[vertexIndex + 0] = tlV;
            vertices[vertexIndex + 1] = trV;
            vertices[vertexIndex + 2] = brV;
            vertices[vertexIndex + 3] = brV;
            vertices[vertexIndex + 4] = blV;
            vertices[vertexIndex + 5] = tlV;
        }
    }

    // Vertical Greedy Meshing for Left and Right Faces
    if(faceIndex == 3 || faceIndex == 1){

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 3){
            tlV = vertices[vertGreedyMeshVertexIndex[index] + 4];
            trV = vertices[vertGreedyMeshVertexIndex[index] + 2];
            blV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 5];
            brV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 1];
        }

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 1){
            tlV = vertices[vertGreedyMeshVertexIndex[index] + 2];
            trV = vertices[vertGreedyMeshVertexIndex[index] + 4];
            blV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 1];
            brV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 5];
        }

        // Wipe all the vertices that exist within where greedy meshing should apply
        for(int i = 0; i < height; i++){

            int iIndex = index - (i * 16);
            for(int l = 0; l < 6; l++){

                int vertexIndex = vertGreedyMeshVertexIndex[iIndex];
                Vertex v = {0, 0, 0};
                vertices[vertexIndex + l] = v;
            }
        }

        int vertexIndex = vertGreedyMeshVertexIndex[index];

        if(debugFaces){
            vertex_colours[vertexIndex + 0] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 1] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 2] = Colour(0, 0, 255, 255);
            vertex_colours[vertexIndex + 3] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 4] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 5] = Colour(0, 0, 255, 255);
        }

        // Create a Greedy Mesh Left Face
        if(faceIndex == 3){

            vertices[vertexIndex + 0] = blV;
            vertices[vertexIndex + 1] = brV;
            vertices[vertexIndex + 2] = trV;
            vertices[vertexIndex + 3] = trV;
            vertices[vertexIndex + 4] = tlV;
            vertices[vertexIndex + 5] = blV;
        }

        // Create a Greedy Mesh Right Face
        if(faceIndex == 1){

            vertices[vertexIndex + 0] = brV;
            vertices[vertexIndex + 1] = blV;
            vertices[vertexIndex + 2] = tlV;
            vertices[vertexIndex + 3] = tlV;
            vertices[vertexIndex + 4] = trV;
            vertices[vertexIndex + 5] = brV;
        }
    }

    // Vertical Greedy Meshing for Top and Bottom Faces
    if(faceIndex == 5 || faceIndex == 4){

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 5){
            tlV = vertices[vertGreedyMeshVertexIndex[index] + 5];
            trV = vertices[vertGreedyMeshVertexIndex[index] + 1];
            blV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 4];
            brV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 2];
        }

        // Set the vertex variables to their respective global vertices
        if(faceIndex == 4){
            tlV = vertices[vertGreedyMeshVertexIndex[index] + 4];
            trV = vertices[vertGreedyMeshVertexIndex[index] + 2];
            blV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 5];
            brV = vertices[vertGreedyMeshVertexIndex[index - ((height - 1) * 16)] + 1];
        }

        // Wipe all the vertices that exist within where greedy meshing should apply
        for(int i = 0; i < height; i++){

            int iIndex = index - (i * 16);
            for(int l = 0; l < 6; l++){

                int vertexIndex = vertGreedyMeshVertexIndex[iIndex];
                Vertex v = {0, 0, 0};
                vertices[vertexIndex + l] = v;
            }
        }

        int vertexIndex = vertGreedyMeshVertexIndex[index];

        if(debugFaces){
            vertex_colours[vertexIndex + 0] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 1] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 2] = Colour(0, 0, 255, 255);
            vertex_colours[vertexIndex + 3] = Colour(255, 0, 0, 255);
            vertex_colours[vertexIndex + 4] = Colour(0, 255, 0, 255);
            vertex_colours[vertexIndex + 5] = Colour(0, 0, 255, 255);
        }

        if(faceIndex == 5){

            vertices[vertexIndex + 0] = tlV;
            vertices[vertexIndex + 1] = trV;
            vertices[vertexIndex + 2] = brV;
            vertices[vertexIndex + 3] = brV;
            vertices[vertexIndex + 4] = blV;
            vertices[vertexIndex + 5] = tlV;
        }

        // Create a Greedy Mesh Right Face
        if(faceIndex == 4){

            vertices[vertexIndex + 0] = blV;
            vertices[vertexIndex + 1] = brV;
            vertices[vertexIndex + 2] = trV;
            vertices[vertexIndex + 3] = trV;
            vertices[vertexIndex + 4] = tlV;
            vertices[vertexIndex + 5] = blV;
        }
    }
}

// The cpu calls this shader with only 6x1x1 dispatch then this shader calls for 1x1x16 work groups
void main(){

    // Current Face Index (Dispatch Position)
    int faceIndex = int(gl_WorkGroupID.x); // xIndex (dispatchIndex) refers to the face direction which is currently being greedy meshed

    // Need to set the appropriate vertGreedyMesh Array Data's
    for(int i = 0; i < 16; i++){
        for(int j = 0; j < 16; j++){

            int index = i + (j * 16);
            int invocationPos;
            int vertexPosition;

            if(faceIndex == 0 || faceIndex == 2){

                invocationPos = int(int(gl_LocalInvocationID.z) + 16 * (j + 16 * i)); // Voxels flattened position
                vertexPosition = (invocationPos * 36) + (faceIndex * 6);
            }

            if(faceIndex == 3 || faceIndex == 1){

                invocationPos = int(i + 16 * (j + 16 * int(gl_LocalInvocationID.z))); // Voxels flattened position
                vertexPosition = (invocationPos * 36) + (faceIndex * 6);
            }

            if(faceIndex == 5 || faceIndex == 4){

                invocationPos = int(j + 16 * (int(gl_LocalInvocationID.z) + 16 * i)); // Voxels flattened position
                vertexPosition = (invocationPos * 36) + (faceIndex * 6);
            }

            // Determine whether this face is currently being rendered
            bool faceRendering = false;
            vec3 prevFaceVertexPosition;
            for(int l = (faceIndex * 6); l < (faceIndex * 6) + 6; l++){

                if(vec3(vertices[(invocationPos * 36) + l].x, vertices[(invocationPos * 36) + l].y, vertices[(invocationPos * 36) + l].z) != prevFaceVertexPosition){

                    faceRendering = true;
                    break;
                }
               prevFaceVertexPosition = vec3(vertices[(invocationPos * 36) + l].x, vertices[(invocationPos * 36) + l].y, vertices[(invocationPos * 36) + l].z);
            }

            // If the face is being rendered then update the data in the vertGreedyMesh Arrays
            if(faceRendering == true){

                vertGreedyMeshHasData[index] = true;
            }else{

                vertGreedyMeshHasData[index] = false;
            }


            vertGreedyMeshVoxelTypes[index] = voxels[invocationPos].voxType;
            vertGreedyMeshHeights[index] = 1;
            vertGreedyMeshWidths[index] = 1;
            vertGreedyMeshVertexIndex[index] = vertexPosition;
        }
    }

    // Perform Vertical Greedy Meshing
    for(int i = 0; i < 16; i++){
        for(int j = 1; j < 16; j++){

            // Get a 1D Index of this loop iteration where (x=i, y=j)
            int index = i + (j * 16);
            int prevIndex = i + ((j - 1) * 16);
            int nextIndex = i + ((j + 1) * 16);

            // Make sure the current index has data stored
            if(vertGreedyMeshHasData[index] == true){

                // Check if the widths of the faces are the same
                if(vertGreedyMeshWidths[index] == vertGreedyMeshWidths[prevIndex]){

                    // Check if the type of the previous face and the type of this face are the same
                    if(vertGreedyMeshVoxelTypes[index] == vertGreedyMeshVoxelTypes[prevIndex]){

                        // Make sure the previous face has data we want to read
                        if(vertGreedyMeshHasData[prevIndex] == true){

                            // Add the height of the previous face to the current face
                            vertGreedyMeshHeights[index] += vertGreedyMeshHeights[prevIndex];
                            vertGreedyMeshHasData[prevIndex] = false;

                            // Check if current face is the last one in the chain or if the nextIndex would be out of bounds
                            if(j != 1 && (j == 15 || vertGreedyMeshHasData[nextIndex] == false)){

                                // Apply Vertical Greedy Meshing and then Continue
                                greedyMeshFacesVertical(index, faceIndex);
                                continue;
                            }
                        }
                    }
                }
            }
        }
    }

    // Copy the Vertical Greedy Mesh onto the Horizontal Greedy Mesh
    for(int i = 0; i < 16*16; i++){

        horizGreedyMeshHasData[i] = vertGreedyMeshHasData[i];
        horizGreedyMeshVoxelTypes[i] = vertGreedyMeshVoxelTypes[i];
        horizGreedyMeshHeights[i] = vertGreedyMeshHeights[i];
        horizGreedyMeshWidths[i] = vertGreedyMeshWidths[i];
        horizGreedyMeshVertexIndex[i] = vertGreedyMeshVertexIndex[i];
    }

    // Perform Horizontal Greedy Meshing
    for(int i = 0; i < 16; i++){
        for(int j = 1; j < 16; j++){

            // Get a 1D Index of this loop iteration where (x=j, y=i)
            int index = j + (i * 16);
            int prevIndex = (j - 1) + (i * 16);
            int nextIndex = (j + 1) + (i * 16);

            // Make sure the current index has data stored
            if(horizGreedyMeshHasData[index] == true){

                // Check if the heights of the faces are the same
                if(horizGreedyMeshHeights[index] == horizGreedyMeshHeights[prevIndex]){

                    // Check if the type of the previous face and the type of this face are the same
                    if(horizGreedyMeshVoxelTypes[index] == horizGreedyMeshVoxelTypes[prevIndex]){

                        // Make sure the previous face has data we want to read
                        if(horizGreedyMeshHasData[prevIndex] == true){

                            // Add the width of the previous face to the current face
                            horizGreedyMeshWidths[index] += horizGreedyMeshWidths[prevIndex];
                            horizGreedyMeshHasData[prevIndex] = false;

                            // Check if current face is the last one in the chain or if the nextIndex would be out of bounds
                            if(j != 1 && (j == 15 || horizGreedyMeshHasData[nextIndex] == false)){

                                // Apply Horizontal Greedy Meshing and then Continue
                                greedyMeshFacesHorizontal(index, faceIndex);
                                continue;
                            }
                        }
                    }
                }
            }
        }
    }
}